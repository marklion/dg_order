// This file generated by ngrestcg
// For more information, please visit: https://github.com/loentar/ngrest

#include "dg_rest.h"
#include <stdlib.h>
#include "Base64.h"
#include "../../../public.h"
#include "../../../dg_data_base/dg_data_opt.h"
#include <map>

static tdf_log g_log("dg_rest");

std::string dg_rest::proc_wechat_login(const std::string& code)
{
    g_log.log("recv rest req: wechat_login, code: %s", code.c_str());
    auto ret = dg_wechat_login(code);
    
    return ret;
}


user_info dg_rest::proc_get_user_info(const std::string& ssid)
{
    user_info ret = {false, "", ""};
    g_log.log("recv rest req: user_info, ssid: %s", ssid.c_str());

    auto p_user_info = get_online_user_info(ssid);
    if (p_user_info)
    {
        ret.online = true;
        Base64::Encode(p_user_info->m_name, &(ret.user_name));
        ret.user_logo = p_user_info->m_logo;
    }

    return ret;
}

static std::string show_dg_order_config(const dg_order_config &_order)
{
    std::string ret;
    std::string dest;
    Base64::Decode(_order.info.destination, &dest);
    ret.append("destination:" + dest + "-----" + "start time:" + _order.info.start_time + "-----" + _order.ssid);

    return ret;
}

std::string dg_rest::proc_dg_order_create(const dg_order_config& order)
{
    g_log.log("recv rest req: dg_order post: %s", show_dg_order_config(order).c_str());
    std::string ret;

    auto p_onlien_user = get_online_user_info(order.ssid);
    if (p_onlien_user)
    {
        std::string dest;
        Base64::Decode(order.info.destination, &dest);
        std::string comments;
        Base64::Decode(order.info.comments, &comments);
        ret = dg_create_order(p_onlien_user->get_pri_id(), dest, order.info.start_time, order.info.deliver_time, comments);
    }

    return ret;
}


dg_order_show dg_rest::proc_dg_get_order(const std::string& order_id)
{
    g_log.log("recv rest req: dg_order get id: %s", order_id.c_str());
    dg_order_show ret;

    auto p_order_conf = dg_get_order(order_id);
    if (p_order_conf)
    {
        auto p_order_owner = get_user_info(p_order_conf->m_owner_user_id);
        if (p_order_owner)
        {
            Base64::Encode(p_order_owner->m_name, &(ret.order_owner_name));
            ret.order_owner_logo = p_order_owner->m_logo;

            Base64::Encode(p_order_conf->m_destination, &(ret.info.destination));
            Base64::Encode(p_order_conf->m_comments, &(ret.info.comments));
            ret.info.deliver_time = p_order_conf->m_deliver_time;
            ret.info.start_time = p_order_conf->m_start_time;
        }
    }

    return ret;
}

std::vector<dg_goods_show> dg_rest::proc_dg_get_goods(const std::string& order_id)
{
    std::vector<dg_goods_show> ret;

    dg_get_goods_name_by_order_id(order_id, [&](const dg_db_goods & _good)->bool {
        dg_goods_show tmp;
        Base64::Encode(_good.m_name, &(tmp.name));
        tmp.picture = _good.m_picture;
        tmp.total = 0;
        dg_get_buyer_by_name(order_id, _good.m_name, [&](const dg_db_goods & _buyer_good)->bool {
            dg_goods_buyer_info tmp_buyer;
            auto p_buyer_user = get_user_info(_buyer_good.m_user_id);
            if (p_buyer_user)
            {
                Base64::Encode(p_buyer_user->m_name, &(tmp_buyer.user_name));
                tmp_buyer.user_logo = p_buyer_user->m_logo;
                Base64::Encode(_buyer_good.m_spec, &(tmp_buyer.spec));
                tmp_buyer.number = dg_get_count_by_buyer_spec(order_id, _good.m_name, _buyer_good.m_user_id, _buyer_good.m_spec);
                tmp.total += tmp_buyer.number;
                tmp.buyer.push_back(tmp_buyer);
            }

            return true;
        });
        ret.push_back(tmp);
        return true;
    });

    return ret;
}

std::string dg_rest::proc_dg_insert_goods(const dg_good_insert& good)
{
    std::string ret = "failed";
    auto p_online_user = get_online_user_info(good.ssid);
    if (p_online_user)
    {
        ret = "success";
        for (int i = 0; i < good.number; i++)
        {
            std::string my_name;
            Base64::Decode(good.name, &my_name);
            std::string my_spec;
            Base64::Decode(good.spec, &my_spec);
            if (dg_insert_goods(my_name, my_spec, good.img, atoi(good.order_id.c_str()), p_online_user->get_pri_id()).size() <= 0)
            {
                ret = "failed";
                break;
            }
        }
    }

    return ret;
}

std::string dg_rest::proc_wx_sign(const std::string& nonceStr, long timestamp, const std::string& url)
{
    return dg_wx_sign(nonceStr, timestamp, url);
}